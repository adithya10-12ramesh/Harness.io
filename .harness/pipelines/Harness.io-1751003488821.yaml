pipeline:
  name: Build and Push NGINX from Git Repo
  identifier: Build_adithya10_12ramesh_Harness_io_1751003503138
  projectIdentifier: Harnessio
  orgIdentifier: default
  tags: {}
  variables:
    - name: AWS_REGION
      type: String
      value: ap-south-1
    - name: ECR_REPO_URI
      type: String
      value: 680871073643.dkr.ecr.ap-south-1.amazonaws.com/nginx
  properties:
    ci:
      codebase:
        connectorRef: GitHub
        repoName: harness
        build:
          type: branch
          spec:
            branch: main
  stages:
    - stage:
        name: Clone and Push NGINX to ECR
        identifier: push_nginx
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Docker
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Show repo contents
                  identifier: show_repo
                  spec:
                    shell: Sh
                    command: |
                      echo "=== working dir ==="
                      pwd
                      echo "=== files ==="
                      ls -la
                      echo "=== Dockerfile ==="
                      [ -f Dockerfile ] && cat Dockerfile || echo "Dockerfile FOUND"
              - step:
                  type: BuildAndPushECR
                  name: BuildAndPushECR_1
                  identifier: BuildAndPushECR_1
                  spec:
                    connectorRef: aws_connector
                    region: ap-south-1
                    account: "680871073643"
                    imageName: nginx
                    tags:
                      - latest
          delegateSelectors:
            - docker5-delegate
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: Deploy NGINX to ECS
        identifier: deploy_nginx_ecs
        type: Deployment
        spec:
          deploymentType: ECS
          service:
            serviceRef: nginx2
            serviceInputs:
              serviceDefinition:
                type: ECS
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: nginx-ecr
                      sources:
                        - identifier: nginxecr
                          type: Ecr
                          spec:
                            connectorRef: aws_connector
                            region: ap-south-1
                            imagePath: nginx
                            tag: latest
          environment:
            environmentRef: production
            deployToAll: false
            infrastructureDefinitions:
              - identifier: nginxecs
          execution:
            steps:
              - step:
                  name: Deploy ECS Service
                  identifier: deploy_ecs
                  type: EcsRollingDeploy
                  spec:
                    sameAsAlreadyRunningInstances: false
              - step:
                  name: Health Check
                  identifier: health_check
                  type: ShellScript
                  spec:
                    shell: Bash
                    onDelegate: false
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "ü©∫ Verifying ECS service..."
                          TASK_ARN=$(aws ecs list-tasks --cluster nginx-cluster --desired-status RUNNING --query 'taskArns[0]' --output text)
                          echo "Running task: $TASK_ARN"
                          if [ "$TASK_ARN" = "None" ]; then
                            echo "‚ùå No running task found."
                            exit 1
                          fi
            rollbackSteps: []
          rollbackSteps: []
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        delegateSelectors:
          - docker7-delegate
