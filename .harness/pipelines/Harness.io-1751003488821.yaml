pipeline:
  name: Build Harness.io
  identifier: Build_adithya10_12ramesh_Harness_io_1751003503138
  projectIdentifier: Harnessio
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1750330006102
        repoName: adithya10-12ramesh/Harness.io
        build: <+input>
  stages:
    - stage:
        name: Build and Push
        identifier: Build_and_Push
        description: Build Docker image and push to ECR
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Docker
            spec:
              connectorRef: docker-delegate
          execution:
            steps:
              - step:
                  type: Run
                  name: Build Docker Image
                  identifier: Build_Docker_Image
                  spec:
                    shell: Sh
                    command: |
                      echo "Building Docker image..."
                      docker build -t tic-tac-toe:latest .
                      docker tag tic-tac-toe:latest <+secrets.getValue("ecr_repo_uri")>:latest
                      docker tag tic-tac-toe:latest <+secrets.getValue("ecr_repo_uri")>:<+pipeline.sequenceId>
              - step:
                  type: Run
                  name: Login to ECR
                  identifier: Login_to_ECR
                  spec:
                    shell: Sh
                    command: |
                      aws ecr get-login-password --region <+pipeline.variables.AWS_REGION> \
                      | docker login --username AWS --password-stdin <+pipeline.variables.ECR_REPO_URI>
              - step:
                  type: Run
                  name: Push to ECR
                  identifier: Push_to_ECR
                  spec:
                    shell: Sh
                    command: |
                      docker push <+secrets.getValue("ecr_repo_uri")>:latest
                      docker push <+secrets.getValue("ecr_repo_uri")>:<+pipeline.sequenceId>
    - stage:
        name: Deploy Application
        identifier: Deploy_Application
        description: Deploy application to EC2 instances
        type: Deployment
        spec:
          deploymentType: Ssh
          service:
            serviceRef: tictactoe_service
            serviceInputs: <+input>
          environment:
            environmentRef: production
            deployToAll: false
            environmentInputs: <+input>
            serviceOverrideInputs: <+input>
            infrastructureDefinitions:
              - identifier: ssh_infra
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Deploy to EC2
                  identifier: deploy_to_ec2
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          # Login to AWS ECR
                          aws ecr get-login-password --region <+pipeline.variables.AWS_REGION> \
                          | docker login --username AWS --password-stdin <+pipeline.variables.ECR_REPO_URI>

                          # Pull latest image
                          docker pull <+pipeline.variables.ECR_REPO_URI>:latest

                          # Stop and remove running container
                          docker stop tic-tac-toe-app || true
                          docker rm tic-tac-toe-app || true

                          # Run container
                          docker run -d --name tic-tac-toe-app -p 80:3000 <+pipeline.variables.ECR_REPO_URI>:latest
                  timeout: 15m
            rollbackSteps:
              - step:
                  type: ShellScript
                  name: Rollback Deployment
                  identifier: rollback_deployment
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Rolling back to previous version..."
                          # Rollback logic goes here
                  timeout: 10m
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
  variables:
    - name: AWS_REGION
      type: String
      description: AWS Region
      value: ap-south-1
    - name: ECR_REPO_URI
      type: String
      description: ECR Repository URI
      value: <+secrets.getValue("ecr_repo_uri")>
    - name: PUBLIC_KEY
      type: String
      description: Public SSH Key
      value: <+secrets.getValue("public_ssh_key")>
