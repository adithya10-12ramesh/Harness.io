pipeline:
  name: Build and Push NGINX from Git Repo
  identifier: Build_adithya10_12ramesh_Harness_io_1751003503138
  projectIdentifier: Harnessio
  orgIdentifier: default
  tags: {}
  variables:
    - name: AWS_REGION
      type: String
      value: ap-south-1
    - name: ECR_REPO_URI
      type: String
      value: 680871073643.dkr.ecr.ap-south-1.amazonaws.com/nginx
  properties:
    ci:
      codebase:
        connectorRef: GitHub
        repoName: harness
        build:
          type: branch
          spec:
            branch: main
  stages:
    - stage:
        name: Clone and Push NGINX to ECR
        identifier: push_nginx
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Docker
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Show repo contents
                  identifier: show_repo
                  spec:
                    shell: Sh
                    command: |
                      echo "=== working dir ==="
                      pwd
                      echo "=== files ==="
                      ls -la
                      echo "=== Dockerfile ==="
                      [ -f Dockerfile ] && cat Dockerfile || echo "Dockerfile NOT FOUND"
              - step:
                  type: BuildAndPushECR
                  name: BuildAndPushECR_1
                  identifier: BuildAndPushECR_1
                  spec:
                    connectorRef: aws_connector
                    region: ap-south-1
                    account: "680871073643"
                    imageName: nginx
                    tags:
                      - latest
          delegateSelectors:
            - docker5-delegate
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
    - stage:
        name: Deploy to EC2
        identifier: deploy_to_ec2
        type: Deployment
        spec:
          deploymentType: Ssh
          service:
            serviceRef: nginx
            serviceInputs:
              serviceDefinition:
                type: Ssh
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: nginx_image
                      sources:
                        - identifier: nginx_image
                          type: Ecr
                          spec:
                            imagePath: nginx
                            tag: latest
          environment:
            environmentRef: production_env
            deployToAll: false
            infrastructureDefinitions:
              - identifier: ssh_infra
                inputs:
                  identifier: ssh_infra
                  type: SshWinRmAws
                  spec:
                    targetedHosts: 65.0.173.1
          execution:
            steps:
              - step:
                  type: ShellScript
                  name: Deploy Container
                  identifier: deploy_container
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          aws ecr get-login-password --region ap-south-1 \
                          | docker login --username AWS --password-stdin 680871073643.dkr.ecr.ap-south-1.amazonaws.com

                          docker pull 680871073643.dkr.ecr.ap-south-1.amazonaws.com/nginx:latest

                          docker stop nginx || true
                          docker rm nginx || true

                          docker run -d --name nginx -p 80:80 680871073643.dkr.ecr.ap-south-1.amazonaws.com/nginx:latest
              - step:
                  type: ShellScript
                  name: Health Check
                  identifier: health_check
                  spec:
                    shell: Bash
                    source:
                      type: Inline
                      spec:
                        script: |
                          echo "Waiting for NGINX to be ready..."
                          sleep 10
                          curl --fail 65.0.173.1 || exit 1
            rollbackSteps: []
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
